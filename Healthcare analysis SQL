SQL Project:  

Advanced Relational Schema and Analytical Queries for an Online Store 			 

          -Lohitaaksh Bethaa 

 

 

 

 

 

 

 

 

 

 

INDEX 

S.no. 

Topic 

Page no. 

1. 

Introduction  

3 

2. 

Creation of Tables 

 

3. 

Inserting Values into tables 

5 

4. 

Case Study 1 

x 

5.  

Case Study 2 

x 

6.  

Case Study 3 

x 

7.  

Case Study 4 

x 

8. 

Case Study 5 

x 

 

 

1. Executive summary 

 

This report delivers a detailed analysis of customer purchasing behavior within an online retail environment, based on data from over 100 customer transactions. The primary objective was to identify patterns and insights that can inform strategic decision-making across marketing, inventory management, and customer engagement functions. 

Our analysis revealed that a small subset of loyal customers contributes disproportionately to overall revenue, highlighting the importance of targeted retention strategies. Additionally, seasonal fluctuations were observed, with significant sales spikes during holiday periods, suggesting the need for proactive inventory planning. 

Top-selling products consistently belonged to specific categories, underlining the opportunity to expand those lines. The report also uncovers underperforming segments that could benefit from promotional campaigns or reevaluation. 

Based on these findings, we recommend implementing a loyalty program for high-value customers, refining marketing efforts toward the most responsive customer segments, and optimizing inventory based on sales trends. These insights are intended to support more data-driven decisions and increase both customer satisfaction and profitability. 

 
 

 

2. Introduction 

 

Leveraging consumer behavior is essential to maximizing sales and improving customer retention in the crowded world of e-commerce. The goal of this report is to evaluate transactional data from the online store, with the expectation of revealing meaningful behaviors related to buying. Using structured query language (SQL) helped me maneuver through customer demographic information, frequency of orders, most popular products by revenue, and total contribution to revenue. 

 The analysis examines four primary tables: customers, products, orders, and order_items, and spans over 100 rows of realistic transactional data. The intention of this report is to provide findings that are actionable by the marketing and sales teams to improve their decision making. Stakeholders include the operations teams, customer success managers, and senior leadership. 

 

 

 

 

 

 

 

 

 

 

 

3. Creation of Tables 

 

Introduction to command: 

Here we have used PRIMARY KEY and AUTO_INCREMENET functions in SQL to not allow duplication of characters for customer ID in customer table, order ID in ORDERS and ORDERS ITEMS table and product ID in products table. The code is as follows. 

Rest all objects in the table are following traditional data types to support data processing. 

Commands: 

Customer Table:  

 

 

Product Table: 
 

 

Order Table: 

 

Order Items Table: 
 

Logic and Reasoning: 

The main approach for using the above methods is to design a normalized relational schema that supports data integrity, scalability, and analytical querying by separating products, customers, orders, and items into distinct tables with appropriate keys and constraints. 

 

 

 
 

 

4. Data Insertion 

 

Introduction to Commands: 
Here we have inserted data into the respective tables use INSERT INTO and VALUES statement. 

Commands 

Inserting in customer table:  
 

 

Output: 
 

Inserting into Product table: 

 

Output: 

 

Inserting into Order table: (134 orders): 
 

 

 

 

 

 

 

 

 

 

Output: 

 

Inserting into Order Items table: 
	 

Output: 
 

Logic and Reasoning: 

The thought was to incorporate populated realistic and varied entries across all tables to simulate real-world store transactions and enable meaningful analytics. 

 

 

 

 

 

 

5. CASE Study 1: Order Status Insights 

 

Introduction to Command: 

The task is to find and count as to how many orders are shipped, pending or have failed delivery. To do that we have used COUNT to find what order fall into the above 3 statuses.  

Furter using SUM and assigning a new column called success score, we can find that success score of the orders corresponding to their status. 

 

Code: 

 

Output: 

Picture 

Logic and Reasoning 

The logic behind this query is to evaluate the overall performance of orders by categorizing them based on their status and assigning a weighted success score to each category. It groups all records in the orders table by their status (such as 'shipped', 'pending', or 'cancelled') and counts how many orders fall into each group. To measure how successful each status type is, the query assigns a value of 1 to 'shipped' orders, 0.5 to 'pending' orders, and 0 to all others using a CASE statement. These values are then summed to produce a total "success score" for each status category. This allows the analysis to go beyond just counts and quantify how effectively orders are being fulfilled, providing a performance measure that reflects both volume and order outcome. The approach was to help categorize orders based on status flags, enabling performance tracking and operational insights on fulfillment efficiency. 

4. CASE Study 2: CTE – Top Customers by Spend 

 

Introduction to command: 

This query is designed to identify the top 5 customers who have spent the most money on successfully shipped orders. It starts by calculating the total amount each customer has spent by multiplying the quantity of each product they ordered by the product’s price.  

This calculation only includes orders that have been marked as “shipped,” ensuring that only completed transactions are considered. The query gathers this information by joining the customers, orders, order items, and products tables. Once the total spending for each customer is calculated, it then ranks all customers in descending order based on how much they’ve spent and selects the top five. 

 The result shows the names of these top-spending customers along with how much they spent. 

 

Command: 

 

Output: 

Picture 

 

 

 

Logic and Reasoning: 

The logic behind the second question is to find the five customers who spent the most on orders that were successfully shipped. The calculation here is the total amount spent on each customer, which is just the product's price times the quantity of that product they purchased. All the data is joined across customers, orders, order_items, and products and filtered so that we only include orders whose status is 'shipped' to capture completed transactions that lead to sales. The results are grouped by customer name, and then the sum of the total amount spent for each customer is calculated and sorted by descending order. Then it simply displays only the five customers with the most amount spent to show the most important customers to the businesses sales. Therefore, we incorporate a Common Table Expression as a mechanism to modularize logic a bit more, as well to simplify bringing back high-value customers into focus for our queries. 

 

 

 

 

 

 

 

 

5. CASE Statement 3: Product Popularity 

 

Introduction to Command: 

To identify the highest-selling products based on completed transactions, a temporary table called product_sales is created. It calculates the total number of units sold for each product by joining the products, order_items, and orders tables, while only including orders with a status of "shipped" to ensure the data reflects actual fulfilled sales.  

The total quantities are grouped by product name. Once the table is built, all product sales data is retrieved and sorted in descending order of units sold, providing a clear overview of which products performed best in terms of shipped sales. 

 

Command: 

 

 

Command: 

 

 

 

 

 

 

 

 

Logic and Reasoning: 

The rationale for the third query is to find the products with the most units sold, but only for orders that were shipped. The first step of this query is to join the products, order_items, and orders table, connecting the product information to the appropriate orders. The query only selects orders that are in a 'shipped' state to ensure we only take sales that were completed. It sums the total quantity for each product sold using SUM(oi.quantity) and groups the results by product name. The query then creates a temporary table, named product_sales, to store the results. Finally, it returns all records from the temporary table in descending order based on total units sold. This type of report would allow you to easily identify products that were successful based upon actual shipped sales. 

 

 

 

 

 

 

 

 

 

 

 

 

 

6. CASE Study 4: String Functions – Email Domain Insights 

 

Introduction to Command: 
This query analyzes customer email addresses to determine how many users are associated with each email domain (like gmail.com, yahoo.com, etc.). It extracts the domain part of each email by using the SUBSTRING_INDEX function, which takes the portion of the email address after the @ symbol. The results are then grouped by these extracted domains, and a count is made of how many customers belong to each one. This provides a simple breakdown of customer distribution by email provider. 

 

Command: 

 

Output: 

 

Logic and Reasoning: 

String parsing helps identify user base distribution across email providers; useful for targeted campaigns and customer profiling. 

 

 

 

 

 

7. CASE Study 5: Order Summary Report per Customer 

 

Introduction to Command: 

To summarize customer purchasing behavior based on completed orders, the data combines customer details with their order and product information. For each customer, it calculates the number of distinct orders they've placed, the total amount they've spent (by multiplying product price with quantity), and a sorted list of unique products they’ve bought.  

The analysis only includes orders marked as "shipped" to ensure accuracy in spending and product data. The final results are grouped by customer name and sorted in descending order of total spending, highlighting the most valuable and active customers. 

 

Code: 

 

Output: 

 

Logic and Reasoning: 

Summarizes customer behavior and order trends, useful for loyalty programs, retention strategies, and performance dashboards. 

 

 

 

 

 

 

 

 

 

Analysis 

 

 
